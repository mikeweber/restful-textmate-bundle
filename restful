before_filter :find

def index
  @${1:things} = ${2:Thing}.find :all

  respond_to do |format|
    format.html
    format.json { render :json => @$1 }
  end
end

def show
  respond_to do |format|
    format.html
    format.json { render :json => @${3:thing} }
  end
end

def new
  @$3 = $2.new

  respond_to do |format|
    format.html
    format.json { render :json => @$3 }
  end
end

def edit
  respond_to do |format|
    format.html
    format.json { render :json => @${3:thing} }
  end
end

def create
  @$3 = $2.new(params[:$3])

  respond_to do |format|
    if @$3.save
      flash[:notice] = '${4:ProperName} was successfully created.'
      format.html { redirect_to($3_path(@$3)) }
      format.json { render :json => @$3, :status => :created, :location => @$3 }
    else
      format.html { render :action => "new" }
      format.json { render :json => @$3, :status => :unprocessable_entity }
    end
  end
end

def update
  @$3.attributes = params[:$3]
  
  respond_to do |format|
    if @$3.save
      flash[:notice] = '$4 was successfully updated.'
      format.html { redirect_to($3_path(@$3)) }
      format.json { head :ok }
    else
      format.html { render :action => "edit" }
      format.json { render :json => @$3, :status => :unprocessable_entity }
    end
  end
end

def destroy
  @$3.destroy

  respond_to do |format|
    format.html { redirect_to($1_path) }
    format.json { head :ok }
  end
end

private

def find
  if params[:id]
    unless @$3 = $2.find_by_id(params[:id])
      respond_to do |format|
        format.html do
          flash[:notice] = "You've specified an invalid $4 to view"
          redirect_to($1_path) and return
        end
        format.json { head :not_found }
      end
    end
  end
end
